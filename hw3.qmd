---
title: "Homework 3"
author: "[Andy Gao]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
editor: 
  markdown: 
    wrap: 72
---

------------------------------------------------------------------------

::: {.callout-important style="font-size: 0.8em;"}
Please read the instructions carefully before submitting your
assignment.

1.  This assignment requires you to only upload a `PDF` file on Canvas
2.  Don't collapse any code cells before submitting.
3.  Remember to make sure all your code output is rendered properly
    before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter
before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine
Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset
from the UCI Machine Learning Repository. The dataset consists of red
and white *vinho verde* wine samples, from the north of Portugal. The
goal is to model wine quality based on physicochemical tests

We will be using the following libraries:

```{r}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
```

## <br><br><br><br>

## Question 1

::: callout-tip
## 50 points

Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in
data frames `df1` and `df2`.

```{r}
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"


df1 <- read.table(url1, header = TRUE, sep = ";")
df2 <- read.csv(url2, header = TRUE, sep = ";")

```

------------------------------------------------------------------------

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1.  Combine the two data frames into a single data frame `df`, adding a
    new column called `type` to indicate whether each row corresponds to
    white or red wine.

2.  Rename the columns of `df` to replace spaces with underscores

3.  Remove the columns `fixed_acidity` and `free_sulfur_dioxide`

4.  Convert the `type` column to a factor

5.  Remove rows (if any) with missing values.

    ```{r}
    df1$type <- "white"
    df2$type <- "red"
    df <- rbind(df1,df2)

    names(df) <- gsub(" ", "_", names(df))

    df <- df[, !(names(df) %in% c("fixed.acidity", "free.sulfur.dioxide"))]

    df$type <- as.factor(df$type)

    df <- na.omit(df)

    dim(df)
    ```

Your output to `R dim(df)` should be

```         
[1] 6497   11
```

------------------------------------------------------------------------

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the
the difference in means (with the equal variance assumption)

1.  Using `df` compute the mean of `quality` for red and white wine
    separately, and then store the difference in means as a variable
    called `diff_mean`.

2.  Compute the pooled sample variance and store the value as a variable
    called `sp_squared`.

3.  Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and
    store its value in a variable called `t1`.

    ```{r}
    mean_red <- mean(df$quality[df$type == "red"])
    mean_white <- mean(df$quality[df$type == "white"])
    diff_mean <- mean_red - mean_white

    var_red <- var(df$quality[df$type == "red"])
    var_white <- var(df$quality[df$type == "white"])
    n_red <- sum(df$type == "red")
    n_white <- sum(df$type == "white")
    sp <-  ((n_red - 1) * var_red + (n_white - 1) * var_white) / (n_red + n_white - 2)

    denominator <- sqrt(sp * (1/n_red + 1/n_white))
    t1 <-  diff_mean / denominator

    t1
    ```

------------------------------------------------------------------------

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to
perform a two-sample $t$-Test without having to compute the pooled
variance and difference in means.

Perform a two-sample t-test to compare the quality of white and red
wines using the `t.test()` function with the setting `var.equal=TRUE`.
Store the t-statistic in `t2`.

```{r}
t_test <- t.test(quality ~ type, data = df, var.equal = TRUE) # Insert your code here
t2 <- t_test$statistic
t2
```

------------------------------------------------------------------------

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the
`lm()` function, and extract the $t$-statistic for the `type`
coefficient from the model summary. Store this $t$-statistic in `t3`.

```{r}
fit <- lm(quality ~ type, data = df) # Insert your here
t3 <- summary(fit)$coefficients[, "t value"]
t3
```

------------------------------------------------------------------------

###### 1.6 (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can
you conclude from this? Why?

```{r}
vec <- c(t1, t2, t3) # Insert your code here
vec
```

I can conclude that the t values of t1 and t2 are the same but in t3 it
is positive

<br><br><br><br> <br><br><br><br> ---

## Question 2

::: callout-tip
## 25 points

Collinearity
:::

------------------------------------------------------------------------

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response
variable `quality`. Use the `broom::tidy()` function to print a summary
of the fitted model. What can we conclude from the model summary?

```{r}
library(broom)
lm_model <- lm(quality ~ ., data = df)
tidy(lm_model)
```

------------------------------------------------------------------------

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only
`citric_acid` as the predictor, and another with only
`total_sulfur_dioxide` as the predictor. In both models, use `quality`
as the response variable. How does your model summary compare to the
summary from the previous question?

```{r}
model_citric <- lm(quality ~ citric.acid, data = df)
tidy(model_citric)
```

```{r}
model_sulfur <-  lm(quality ~ total.sulfur.dioxide, data = df)
tidy(model_sulfur)
```

It appears that when we use different predictors the standard error
stays the same but everything else like the p value and t stat
drastically changes

------------------------------------------------------------------------

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using
`corrplot()`

```{r}
install.packages('corrplot')
library(corrplot)
df %>%  
  select_if(is.numeric) %>%
  cor() %>%
  corrplot()
```

------------------------------------------------------------------------

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the
full model using `vif()` function. What can we conclude from this?

```{r}
lm <- lm(quality ~ ., data = df)
tidy(vif(lm))

```

the closer the VIF is to 1 the lower the multicollinearity the closer it
is to 10 the higher the multicollinearity in the regression anaysis

<br><br><br><br> <br><br><br><br> ---

## Question 3

::: callout-tip
## 40 points

Variable selection
:::

------------------------------------------------------------------------

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the
starting model. Store the final formula in an object called
`backward_formula` using the built-in `formula()` function in R

```{r}
full_model <- lm(quality~ ., data = df)
backward_model <- step(full_model, direction = "backward")
backward_formula <- formula(backward_model)
```

------------------------------------------------------------------------

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the
starting model. Store the final formula in an object called
`forward_formula` using the built-in `formula()` function in R

```{r}
null_model <- lm(quality~ 1, data = df)
forward_model <- step(full_model, direction = "forward")
forward_formula <- formula(forward_model)
```

------------------------------------------------------------------------

###### 3.3 (10 points)

1.  Create a `y` vector that contains the response variable (`quality`)
    from the `df` dataframe.

2.  Create a design matrix `X` for the `full_model` object using the
    `make_model_matrix()` function provided in the Appendix.

3.  Then, use the `cv.glmnet()` function to perform LASSO and Ridge
    regression with `X` and `y`.

    ```{r}
    y <- df$quality

    make_model_matrix <- function(formula){
      X <- model.matrix(formula, df)[, -1]
      cnames <- colnames(X)
      for(i in 1:ncol(X)){
        if(!cnames[i] == "typewhite"){
          X[, i] <- scale(X[, i])
        } else {
          colnames(X)[i] <- "type"
        }
      }
      return(X)
    }

    x <- make_model_matrix(full_model)

    lasso <- cv.glmnet(x, y, alpha = 1)
    ridge <- cv.glmnet(x, y, alpha = 0)
    ```

Create side-by-side plots of the ridge and LASSO regression results.
Interpret your main findings.

```{r}
par(mfrow=c(1, 2))
plot(lasso,main = "lasso")
plot(ridge,main = "ridge")

```

in the lasso model we see that as lambda increases the mean sq error
goes up exponentially but in the ridge model we see that the points are
more densely packed and that after lambda reaches about 2 the standard
error levels off a little bit

------------------------------------------------------------------------

###### 3.4 (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se`
value? What are the variables selected by LASSO?

Store the variable names with non-zero coefficients in `lasso_vars`, and
create a formula object called `lasso_formula` using the
`make_formula()` function provided in the Appendix.

```{r}
lambda_1se <- lasso$lambda.1se
lasso_coef <- coef(lasso, s = "lambda.1se")

lasso_vars <- names(lasso_coef)[lasso_coef != 0]
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}
lasso_formula <- make_formula(lasso_coef)
lasso_formula
```

variables selected are volatile acidity, residual sugar, sulphates, and
alcohol

------------------------------------------------------------------------

###### 3.5 (5 points)

Print the coefficient values for ridge regression at the `lambda.1se`
value? What are the variables selected here?

Store the variable names with non-zero coefficients in `ridge_vars`, and
create a formula object called `ridge_formula` using the
`make_formula()` function provided in the Appendix.

```{r}
lambda_1se <- lasso$lambda.1se
ridge_coef <- coef(ridge, s = "lambda.1se")

ridge_vars <- names(ridge_coef)[ridge_coef != 0]
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}
ridge_formula <- make_formula(ridge_coef)
ridge_formula
```

all of the variables were used in ridge

------------------------------------------------------------------------

###### 3.6 (10 points)

What is the difference between stepwise selection, LASSO and ridge based
on you analyses above?

in step it adds the predictors together one by one based on what method
we use, in Lasso it only adds up the most significant variables together
and in Ridge it does the same as Lasso but does it in a way that it's
more lienient

<br><br><br><br> <br><br><br><br> ---

## Question 4

::: callout-tip
## 70 points

Variable selection
:::

------------------------------------------------------------------------

###### 4.1 (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the
covariates. How many different models can we create using any subset of
these $10$ coavriates as possible predictors? Justify your answer.

------------------------------------------------------------------------

###### 4.2 (20 points)

Store the names of the predictor variables (all columns except
`quality`) in an object called `x_vars`.

```{r}
x_vars <- colnames(df %>% select(-quality))
```

Use:

-   the `combn()` function (built-in R function) and
-   the `make_formula()` (provided in the Appendix)

to **generate all possible linear regression formulas** using the
variables in `x_vars`. This is most optimally achieved using the `map()`
function from the `purrr` package.

```{r}
formulas <- map(
  1:length(x_vars),
  \(x){
    vars <- combn(x_vars, x, simplify = FALSE) 
    map(vars, ~ paste(.x, collapse = " + ")) 
  }
) %>% unlist()
```

If your code is right the following command should return something
along the lines of:

```{r}
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"                                                 
# [2] "quality ~ citric_acid"                                                                                                
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"  
```

------------------------------------------------------------------------

###### 4.3 (10 points)

Use `map()` and `lm()` to fit a linear regression model to each formula
in `formulas`, using `df` as the data source. Use `broom::glance()` to
extract the model summary statistics, and bind them together into a
single tibble of summaries using the `bind_rows()` function from
`dplyr`.

```{r}
models <- map(formulas, ~ {
  tryCatch(
    lm(as.formula(.x), data = df),
    error = function(e) NULL
  )
})
summaries <- map(models, glance)
bind <- bind_rows(summaries)
bind
```

------------------------------------------------------------------------

###### 4.4 (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to
identify the formula with the ***highest*** adjusted R-squared value.

```{r}
adj_r_squared <- map_dbl(summaries, "adj.r.squared")
max <- which.max(adj_r_squared)
```

Store resulting formula as a variable called `rsq_formula`.

```{r}
rsq_formula <- formulas[max]
rsq_formula
```

------------------------------------------------------------------------

###### 4.5 (5 points)

Extract the `AIC` values from `summaries` and use them to identify the
formula with the ***lowest*** AIC value.

```{r}
aic<- map_dbl(summaries, "AIC")
min <- which.min(aic)
```

Store resulting formula as a variable called `aic_formula`.

```{r}
aic_formula <- formulas[min]
aic_formula
```

------------------------------------------------------------------------

###### 4.6 (15 points)

Combine all formulas shortlisted into a single vector called
`final_formulas`.

```{r}
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)
```

-   Are `aic_formula` and `rsq_formula` the same? How do they differ
    from the formulas shortlisted in question 3?

    AIC is used for model selection while rsq is used for evaluating the
    goodness of fit of regression model and they differ from lasso and
    ridge as they reduce overfitting and handle multicollinearity

-   Which of these is more reliable? Why?

    depending on what you're trying to do, AIC and R squared are used
    for model evaluation and selection while lasso and ridge are used to
    improve preformance of regression model so depending on the
    situation such as data size

-   If we had a dataset with $10,000$ columns, which of these methods
    would you consider for your analyses? Why?

    lasso would be most effective because as away to prevent Overfitting
    it removes the least significant columns and would be more efficient
    dealing with so many variables

------------------------------------------------------------------------

###### 4.7 (10 points)

Use `map()` and `glance()` to extract the
`sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model
obtained from `final_formulas`. Bind them together into a single data
frame `summary_table`. Summarize your main findings.

```{r}
summary_table <- map(final_formulas, ~{
  model <- lm(final_formulas = .x, data = df)
  glance(model) %>%
    select(sigma, adj.r.squared, AIC, df, p.value) 
}) %>% 
  bind_rows()

summary_table %>% knitr::kable()
```

::: {.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br> <br><br><br><br> ---

# Appendix

#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x`
and outputs a `formula` object with `quality` as the response variable
and the columns of `x` as the covariates.

``` r
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

# For example the following code will
# result in a formula object
# "quality ~ a + b + c"
make_formula(c("a", "b", "c"))
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and
outputs a **rescaled** model matrix `X` in a format amenable for
`glmnet()`

``` r
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::
